@font-face {
    font-family: "a";
    /*中文字体*/
    src: url();
    font-display: swap;
}


@font-face {
    font-family: "b";

    src: url(../fonts/Ubuntu-Regular.ttf);
    font-display: swap;
}

@font-face {
    font-family: "title";
    /*英文字体*/
    src: url(../fonts/Pacifico-Regular.ttf);
    font-display: swap;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    /* box-sizing: border-box;属性含义：Element width=width */
    /* box-sizing: content-box;属性含义：Element width=width +border+padding */
    user-select: none;
    /* none：文本不能被选择 
    text：可以选择文本 
    all： 当所有内容作为一个整体时可以被选择。
          如果双击或者在上下文上点击子元素，
          那么被选择的部分将是以该子元素向上回溯的最高祖先元素。 
    element： 可以选择文本，但选择范围受元素边界的约束 */
}

a:hover,
a:link,
a:visited,
a:active,
a:focus {
    text-decoration: none;
    outline: none;
    border: none;
    color: inherit;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}


/* 设置滚动条样式 */
::-webkit-scrollbar {
    width: 13px;
    /* 最右侧滚动条的粗细 */
}

::-webkit-scrollbar-thumb {
    background-color: var(--main_text_color, #f76cc6);
    border-radius: 8px;
    height: 20%;
}

::-webkit-scrollbar-track {
    background-color: var(--main_bg_color, linear-gradient(50deg, #a2d0ff, #ffffff));
}

html[data-theme="Dark"] {

    --main_text_color: #fff;
    --gradient: linear-gradient(120deg, rgb(133, 62, 255), #f76cc6 30%, rgb(255, 255, 255) 60%);
    --job_text_color: #747bff;
    --text_bg_color: rgb(26, 4, 48);
    --item_bg_color: rgb(19, 20, 24);
    --item_hover_color: rgb(19, 23, 27);
    --item_left_title_color: rgb(255, 255, 255);
    --item_left_text_color: rgb(142, 142, 142);
    --footer_text_color: #646464;
    --left_tag_item: linear-gradient(50deg, #1f2327, #000000);
    --card_filter: 0px;
    --back_filter: 0px;
    --back_filter_color: #000000;
    --fill: #ffffff;
}

body {
    height: 100%;
    min-height: 100vh;
    width: 100%;
    position: relative;
    font-family: "b", "a", sans-serif;
    background: var(--main_bg_color);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    transition: color 0.1s ease;
    color: var(--main_text_color);
}


@keyframes zoom {
    0% {
        transform: scale(0);
        opacity: 1;
    }

    50% {
        opacity: 0.5;
    }

    100% {
        transform: scale(1);
        opacity: 0;
    }
}

.mayjaneboy-main {
    width: 100%;
    margin: 0 auto;
    transition: transform 0.5s ease;
    /* 背景色过渡 */
    /* 搞不懂，感觉是阴影或者透明的相关属性 */
    max-width: 1150px;
    /* 改成1950px会充满全屏 */
    /* 它是用margin做成水平居中对齐的 */
    /* 所以这个值不要设1950px */
    position: relative;
    /* 父盒子用相对定位，不脱标，占位置 */
    display: flex;
    /* 将对象作为弹性伸缩盒显示 */
    /* 手册上有，搞不清楚 */
    flex-direction: row;
    /* 主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。 */
}

.mayjaneboy-left {
    overflow-y: scroll;
    /* visible： 对溢出内容不做处理，内容可能会超出容器。
       hidden： 隐藏溢出容器的内容且不出现滚动条。
       scroll： 隐藏溢出容器的内容，溢出的内容将以卷动滚动条的方式呈现。
       auto： 当内容没有溢出容器时不出现滚动条，当内容溢出容器时出现滚动条，按需出现滚动条。此为body对象和textarea的默认值。 */
    /* 现在好像没有溢出，或者下面做了设置，导致这个属性没什么影响 */
    width: 230px;
    height: 740px;
    /* height值会影响下面的sticky的效果，奇怪 */
    /* 原作者是100vh，大约是742px */
    /* display: flex; */
    padding: 0 15px;
    position: relative;
    /* relative占有空间，随动而动 */
    /* sticky占有空间，动截而定 */
    /* 绝对和固定都会失去本来的空间，效果不好 */
    top: 0;
    left: 0;
    align-items: center;
    /* 看手册吧 */
    flex-direction: column;
    /* row： 主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。 
        row-reverse： 对齐方式与row相反。 
        column： 主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。 
        column-reverse： 对齐方式与column相反。 */
}

.mayjaneboy-left::-webkit-scrollbar {
    display: none;
    /* 隐藏对象（滚动条） */
    /* 这个属性值改为flex会在右边多一个滚动条 */
}

.logo {
    flex-shrink: 0;
    /* 搞不懂这个值，似乎和溢出有关 */
    width: 90%;
    /* mayjaneboy-left为230，内边距15，所以实际只有200 */
    /* 90%就是180 */
    position: relative;
    /* 相对定位，占有位置 */
    aspect-ratio: 1/1;
    /* 不知道属性代表什么意思 */
    margin-top: 50px;
    background-size: contain;
    /* auto： 背景图像的真实大小
    cover： 将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器
    contain： 将背景图像等比缩放到宽度或高度与容器的宽度或高度相等，背景图像始终被包含在容器内。 */
    border-radius: 5px;
    /* 设置圆角边框或圆 */
}

.left-div {
    flex-shrink: 0;
    width: 100%;
    border-radius: 10px;
    margin-top: 15px;
    padding: 20px;
    backdrop-filter: blur(var(--card_filter));
    -webkit-backdrop-filter: blur(var(--card_filter));
    background: var(--item_bg_color);
    /* 看不懂上面三个属性 */
}

.left-des {
    display: flex;
    flex-direction: column;
    /* row： 主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。 
        row-reverse： 对齐方式与row相反。 
        column： 主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。 
        column-reverse： 对齐方式与column相反。 */
    justify-content: center;
    /* center：弹性盒子元素将向行中间位置对齐。该行的子元素将相互对齐并在行中居中对齐，
    同时第一个元素与行的主起始位置的边距等同与最后一个元素与行的主结束位置的边距
    （如果剩余空间是负数，则保持两端相等长度的溢出）。 */
    /* 感觉就是让多个元素都水平垂直都居中对齐，上下间距也相同 */
}

.left-des-item {
    display: flex;
    align-items: center;
    /* 看手册吧 */
    line-height: 20px;
    font-size: 15px;
    margin-bottom: 5px;
    overflow: hidden;
    /* visible： 对溢出内容不做处理，内容可能会超出容器。
       hidden： 隐藏溢出容器的内容且不出现滚动条。 
       scroll： 隐藏溢出容器的内容，溢出的内容将以卷动滚动条的方式呈现。 
       auto：当内容没有溢出容器时不出现滚动条，当内容溢出容器时出现滚动条，按需出现滚动条。 */
}

.left-des-item i,
.left-des-item svg {
    width: 16px;
    height: 16px;
    fill: var(--fill);
    font-size: 18px;
    margin-right: 10px;
}

.left-tag {
    display: flex;
    flex-direction: row;
    /* row： 主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。 
    row-reverse： 对齐方式与row相反。 
    column： 主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。 
    column-reverse： 对齐方式与column相反。 */
    flex-wrap: wrap-reverse;
    /* nowrap： flex容器为单行。该情况下flex子项可能会溢出容器
    wrap： flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行
    wrap-reverse： 反转 wrap 排列。 */
    padding: 14px;
}

.left-tag-item {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 28px;
    margin: 0px 5px 5px 0;
    padding: 10px;
    font-size: 13px;
    border-radius: 10px;
    background: var(--left_tag_item);
}

#line {
    width: 100%;
    height: 200px;
    font-size: 13px;
    padding-left: 8px;
    scroll-snap-type: y mandatory;
    overflow-y: scroll;
    /* visible： 对溢出内容不做处理，内容可能会超出容器。
           hidden： 隐藏溢出容器的内容且不出现滚动条。
           scroll： 隐藏溢出容器的内容，溢出的内容将以卷动滚动条的方式呈现。
           auto： 当内容没有溢出容器时不出现滚动条，当内容溢出容器时出现滚动条，按需出现滚动条。此为body对象和textarea的默认值。 */

}

#line li {
    list-style: none;
    position: relative;
    padding: 15px 0px 0px 15px;
    border-left: 2px solid #d5d5d5;
    /* 那条线是用border-left做的 */
    /* 代码是左边框2+内边距15+实际宽度135=152的li的本来宽度 */
    /* 但F12分析是 左边框1.6+内边距15+实际宽度135.4=152的本来宽度 */
    /* ？？？？左边框的大小为什么会变 */
    border-radius: 0;
    scroll-snap-align: end;
    color: var(--main_text_color);
    /* 看不懂上面两个属性 */
}

.focus {
    width: 8px;
    height: 8px;
    border-radius: 4px;
    background-color: rgb(255 255 255);
    /* border: 2px solid #fff; */
    /* 边框的实际宽度也是只有1.6px */
    position: absolute;
    left: -5px;
    top: 50%;
}

#line li:first-child .focus:first-child {
    background-color: #aaffcd;
    animation: focus 1.8s ease infinite;
    /* 看手册写的很复杂，应该是动画时间的一个属性 */
}

#line::-webkit-scrollbar {
    display: none;
    /* 不显示滚动条 */
}

.mayjaneboy-right {
    width: calc(100% - 230px);
    /* 跟calc是什么用法 */
    display: flex;
    padding: 20px;
    position: relative;
    padding-bottom: 50px;
    flex-direction: column;
    /* row： 主轴与行内轴方向作为默认的书写模式。即横向从左到右排列（左对齐）。 
        row-reverse： 对齐方式与row相反。 
        column： 主轴与块轴方向作为默认的书写模式。即纵向从上往下排列（顶对齐）。 
        column-reverse： 对齐方式与column相反。 */
}

.welcome {

    font-size: 65px;
    font-weight: 800;
    margin: 20px 0;
}

.description {

    font-size: 20px;
    margin-top: 7px;
}

.gradientText {

    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 200%;
    background-position: 0%;
    font-family: "title";
    animation: backgroundSizeAnimation 10s ease-in-out infinite;
    background-image: var(--gradient);
}

@keyframes backgroundSizeAnimation {
    0% {
        background-position: 100%;
    }

    25% {
        background-position: 50%;
    }

    50% {
        background-position: 0%;
    }

    75% {
        background-position: 50%;
    }

    100% {
        background-position: 100%;
    }

}

.jobText {
    color: var(--job_text_color);
    font-weight: 800;
}

.iconContainer {
    width: 100%;
    height: 60px;
    display: flex;
    align-items: center;
    overflow-x: scroll;
    /* visible： 对溢出内容不做处理，内容可能会超出容器。
           hidden： 隐藏溢出容器的内容且不出现滚动条。
           scroll： 隐藏溢出容器的内容，溢出的内容将以卷动滚动条的方式呈现。
           auto： 当内容没有溢出容器时不出现滚动条，当内容溢出容器时出现滚动条，按需出现滚动条。此为body对象和textarea的默认值。 */
    margin-top: 20px;

}

.iconContainer::-webkit-scrollbar {
    display: none;
    /* 注意iconContainer样式类中,overflow是设置的x轴，所以滚动条是x方向的 */
}

.iconItem {
    width: 49px;
    height: 43px;
    box-sizing: border-box;
    /* 不清楚什么意思 */
    border-radius: 7px;
    display: flex;
    margin-left: 10px;
    backdrop-filter: blur(var(--card_filter));
    -webkit-backdrop-filter: blur(var(--card_filter));
    background: var(--item_bg_color);
    /* 看不懂上面三个属性 */
    align-items: center;
    justify-content: center;
    transition: width 0.3s ease, opacity 0.3s ease, transform 0.3s ease;
    flex-shrink: 0;
}

.iconItem i,
.iconItem svg {
    width: 22px;
    height: 22px;
    fill: var(--fill);
    font-size: 22px;
    margin-right: 3px;
}

.switch {
    width: 55px;
    height: 43px;
    box-sizing: border-box;
    border-radius: 7px;
    display: flex;
    margin-left: 10px;
    backdrop-filter: blur(var(--card_filter));
    -webkit-backdrop-filter: blur(var(--card_filter));
    background: var(--item_bg_color);
    align-items: center;
    justify-content: center;
    transition: width 1s ease, opacity 1s ease, transform 1s ease;
    /* 只有这个属性和iconItem不一样,在动画时间上体验不一样 */
    flex-shrink: 0;
}

.iconTip {
    white-space: nowrap;
    /* normal: 默认处理方式 
    pre: 用等宽字体显示预先格式化的文本。不合并字间的空白距离和进行两端对齐。参阅pre对象 
    nowrap: 强制在同一行内显示所有文本，直到文本结束或者遭遇br对象。参阅td，div等对象的nowrap属性（特性） */
    display: none;
    /* 先设置为不显示 */
}

.iconItem:hover {
    width: 95px;
    transform: translateY(-2px);
    background: var(--item_hover_color);
    /* 当那个小项目被鼠标滑过时，改变了宽度和透明度之类的 */
}

.iconItem:hover .iconTip {
    display: block;
    /* 鼠标滑过时，显示 */
}

.switch:hover {
    width: 75px;
    transform: translateY(-2px);
    background: var(--item_hover_color);
}

.tanChiShe {
    width: 85%;
}

.tanChiShe img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.title {
    display: flex;
    align-items: center;
    font-size: 26px;
    font-weight: 800;
    margin: 20px 0;
    transition: transform 0.4s ease;
}

.title i,
.title svg {
    margin-right: 8px;
    height: 26px;
    width: 26px;
    fill: var(--fill);
}

.title:hover {
    transform: translateY(-5px);
}

.projectList {
    display: flex;
    flex-wrap: wrap;
    /* nowrap： flex容器为单行。该情况下flex子项可能会溢出容器
        wrap： flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行
        wrap-reverse： 反转 wrap 排列。 */
}

.projectItem {
    margin: 10px;
    display: flex;
    background-color: var(--item_bg_color);
    border-radius: 8px;
    padding: 15px;
    height: 100px;
    width: calc(25% - 15px);
    backdrop-filter: blur(var(--card_filter));
    -webkit-backdrop-filter: blur(var(--card_filter));
    transition: opacity 0.5s ease, background-color 0.2s ease, border 0.2s ease, transform 0.3s ease;

}

.projectItem:hover {
    /* 经过项目时的动画和阴影透明效果 */
    box-shadow: 0 8px 16px -4px #2c2d300c;
    transform: translateY(-2px);
}

.projectItem.pressed {
    /* 按压项目不放时的动画和阴影透明效果 */
    transform: scale(0.9);
    /* 缩小到原来的0.9倍 */
    background-color: var(--item_hover_color);
}

.projectItem:hover .projectItemLeft {
    width: 100%;
    /* 鼠标经过时，项目左侧宽度不变 */
}

.projectItemLeft {
    transition: width 0.4s ease;
    height: 100%;
    width: 80%;
}

.projectItemLeft h1 {
    font-weight: normal;
    font-size: 16px;
    margin: 6px;

    transition: font-size 0.4s ease;
    color: var(--item_left_title_color);
}

.projectItem:hover h1 {
    font-size: 18px;
}

.projectItemLeft p {
    font-size: 13px;
    margin-top: 20px;
    color: var(--item_left_text_color);
}

.projectItemRight {
    overflow: visible;
    /* 在鼠标经过时，包含图片的盒子的宽度被更改为0，此时图片并不是直接消失 */
    /* 图片仍然在那个位置上，因为父盒子宽度为0，所以有溢出 */
    /* 而这里的overflow这个属性就是处理溢出的 */
    /* visible: 不剪切内容也不添加滚动条。
        hidden: 不显示超过对象尺寸的内容，也没有显示滚动条，
        所以当是hidden时，图片超出的部分（全部都超出了）被剪切，形成“隐藏”效果
        auto: 在需要时剪切内容并添加滚动条
        scroll: 总是显示滚动条 */
    /* 搭配transform动画效果，但优先级低，所以先展示动画效果，再根据overflow处理溢出 */
    transition: width 0.4s ease;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 20%;
    height: 100%;
}

.projectItemRight img {
    height: 39px;
    width: 39px;
}

.projectItem:hover .projectItemRight {
    width: 0%;
    /* 鼠标经过时，项目右侧宽度为0*/
}

.projectItem:hover .projectItemRight img {
    transform: rotate(40deg);
    /* 鼠标经过时的动画效果 */
    /* 搭配overflow属性 但优先级高，所以先展示动画效果，再根据overflow处理溢出 */
}

footer {
    position: absolute;
    /* 绝对定位不占有位置，所以可以在其他内容上显示 */
    /* 相对定位占有位置 */
    padding: 10px;
    text-align: center;
    width: 100%;
    backdrop-filter: blur(var(--card_filter));
    -webkit-backdrop-filter: blur(var(--card_filter));
    background: var(--item_bg_color);
    color: var(--footer_text_color);
    font-size: 13px;
    bottom: 0;
}

@media (min-width: 800px) {

    .index-logo {
        display: none;
    }
}

@media (max-width: 1150px) {
    .a {
        width: calc(50% - 20px);
    }

    .projectItem {
        margin: 10px;
    }

    .b {

        width: calc(50% - 20px);


    }
}

@media (max-width: 800px) {
    .zyyo-left {
        display: none;
    }

    .a .projectItemRight {
        display: none;

    }

    .a .projectItemRight img {
        display: none;

    }

    .a .projectItemLeft {
        width: 100%;
    }

    .a {

        width: calc(50% - 18px);
        margin: 9px;

    }

    .b {
        height: 110px;
        margin: 8px 15px;
        width: calc(100% - 30px);
    }



    .zyyo-right {
        width: 100%;
    }

    .tanChiShe {
        width: 100%;
    }

    .description {
        font-size: 4vw;
    }

    .welcome {
        font-size: 10vw;
        margin: 2vw 0;

    }

    .iconContainer {

        margin-top: 4vw;

    }

    .projectItem {
        padding: 10px;
    }

    .projectItemLeft p {
        font-size: 13px;
    }

    .projectItemLeft h1 {

        font-size: 18px;
    }

    .projectItem:hover h1 {

        font-size: 20px;

    }

    .skill #skillWap {
        display: block;
    }

    .skill #skillPc {
        display: none;
    }

}

.onoffswitch {
    position: relative;
    width: 38px;
    height: 20px;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
}

.onoffswitch-checkbox {
    display: none;
}

.onoffswitch-label {
    display: block;
    overflow: hidden;
    cursor: pointer;
    height: 100%;
    border-radius: 50px;
}

.onoffswitch-inner {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 200%;
    height: 100%;
    margin-left: -100%;
    transition: margin 0.2s ease-in 0s;
}

.onoffswitch-inner:before,
.onoffswitch-inner:after {
    display: flex;
    justify-content: center;
    align-items: center;
    float: left;
    width: 50%;
    height: 100%;
    padding: 0;
    font-size: 12px;
    color: white;
    font-family: Trebuchet, Arial, sans-serif;
    font-weight: bold;
    box-sizing: border-box;
}

.onoffswitch-inner:before {
    content: "";
    background-color: rgb(110 110 110 / 50%);
    color: #FFFFFF;
    text-align: left;
}

.onoffswitch-inner:after {
    content: "";
    background-color: #272727;
    color: #FAFAFA;
    text-align: right;
}

.onoffswitch-switch {
    display: block;
    height: 70%;
    aspect-ratio: 1/1;
    background: #FFFFFF;
    position: absolute;
    top: 12.5%;
    bottom: 12.5%;
    right: 5px;

    border-radius: 20px;
    transition: right 0.2s ease-in 0s;
}

.onoffswitch-checkbox:checked+.onoffswitch-label .onoffswitch-inner {
    margin-left: 0;
}

.onoffswitch-checkbox:checked+.onoffswitch-label .onoffswitch-switch {
    right: 50%;
}